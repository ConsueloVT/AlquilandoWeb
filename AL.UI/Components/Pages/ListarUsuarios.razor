@page "/listar-usuarios"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject IServicioSesion servicioSesion
@inject IUsuarioRepositorio UsuarioRepositorio
@inject IReservasRepositorio ReservasRepositorio

<h3>Usuarios registrados</h3>

@if (servicioSesion.Rol == RolUsuario.Administrador || servicioSesion.Rol == RolUsuario.Encargado)
{
    <div class="mb-3">
        <label class="form-label">Reservas realizadas en los últimos (meses):</label>
        <InputNumber @bind-Value="cantidadMeses" class="form-control" />
        <button class="btn btn-primary mt-2" @onclick="FiltrarUsuarios">Aplicar Filtro</button>
    </div>

    @if (!string.IsNullOrEmpty(mensaje))
    {
        <div class="alert alert-info">@mensaje</div>
    }

    @if (usuariosFiltrados != null && usuariosFiltrados.Any())
    {
        <table class="table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Nombre</th>
                    <th>Apellido</th>
                    <th>Email</th>
                    <th>Acción</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var u in usuariosFiltrados)
                {
                    <tr>
                        <td>@u.Id</td>
                        <td>@u.Nombre</td>
                        <td>@u.Apellido</td>
                        <td>@u.CorreoElectronico</td>
                        <td>
                            @if (u.EstaHabilitado)
                            {
                                <button class="btn btn-danger btn-sm" @onclick="() => DeshabilitarUsuario(u.Id)">Deshabilitar</button>
                            }
                            else
                            {
                                <button class="btn btn-success btn-sm" @onclick="() => HabilitarUsuario(u.Id)">Habilitar</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No hay usuarios para mostrar.</p>
    }
}


@code {
    private int cantidadMeses = 1;
    private List<Usuario> usuariosFiltrados = new();
    private bool _usuarioInicializado = false;
    private string? mensaje;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_usuarioInicializado)
        {
            await servicioSesion.InicializarUsuarioAsync();

            var usuario = UsuarioRepositorio.ObtenerPorId(servicioSesion.Id);
            if (usuario != null)
            {
                _usuarioInicializado = true;
                servicioSesion.IniciarSesion();
            }
            if (servicioSesion.Rol != RolUsuario.Administrador && servicioSesion.Rol != RolUsuario.Encargado)
            {
                NavigationManager.NavigateTo("/", true);
            }
            StateHasChanged(); // Refresca la UI
        }
    }

    private void FiltrarUsuarios()
    {
        usuariosFiltrados = UsuarioRepositorio.ListarUsuariosConReservasEnUltimosMeses(cantidadMeses);
    }

    private void HabilitarUsuario(int usuarioId)
    {
        try
        {
            var casoDeUso = new HabilitarUsuarioCasoDeUso(UsuarioRepositorio);
            casoDeUso.Ejecutar(usuarioId);
            mensaje = "Usuario habilitado correctamente.";
        }
        catch (Exception ex)
        {
            mensaje = $"Error al habilitar: {ex.Message}";
        }

        FiltrarUsuarios();
    }

    private void DeshabilitarUsuario(int usuarioId)
    {
        try
        {
            var casoDeUso = new DeshabilitarUsuarioCasoDeUso(UsuarioRepositorio, ReservasRepositorio);
            casoDeUso.Ejecutar(usuarioId);
            mensaje = "Usuario deshabilitado correctamente.";
        }
        catch (Exception ex)
        {
            mensaje = $"Error al deshabilitar: {ex.Message}";
        }

        FiltrarUsuarios();
    }
}
